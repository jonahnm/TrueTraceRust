use crate::common_vars::{vec2, vec3, vec4, RayObjMat};

pub enum Options {
    Disney,
    Cutout,
    Fade,
}
pub enum BlendModes {
    Lerp,
    Add,
    Multiply,
}
pub struct RayTracingObject {
    pub material_options: Vec<Options>,
    pub local_materials:  Vec<RayObjMat>,
    pub kelvin_temp: Vec<f32>,
    pub use_kelvin: Vec<bool>,
    pub transmission_color: Vec<vec3>,
    pub base_color: Vec<vec3>,
    pub metallic_remap: Vec<vec2>,
    pub roughness_remap: Vec<vec2>,
    pub emission: Vec<f32>,
    pub emission_color: Vec<vec3>,
    pub roughness: Vec<f32>,
    pub ior: Vec<f32>,
    pub metallic: Vec<f32>,
    pub specular_tint: Vec<f32>,
    pub sheen: Vec<f32>,
    pub sheen_tint: Vec<f32>,
    pub clearcoat: Vec<f32>,
    pub clearcoat_gloss: Vec<f32>,
    pub anisotropic: Vec<f32>,
    pub flatness: Vec<f32>,
    pub diff_trans: Vec<f32>,
    pub spec_trans: Vec<f32>,
    pub scatter_dist: Vec<f32>,
    pub specular: Vec<f32>,
    pub alpha_cutoff: Vec<f32>,
    pub normal_strength: Vec<f32>,
    pub hue: Vec<f32>,
    pub saturation: Vec<f32>,
    pub brightness: Vec<f32>,
    pub contrast: Vec<f32>,
    pub blend_color: Vec<vec3>,
    pub blend_factor: Vec<f32>,
    pub main_tex_scale_offset: Vec<vec4>,
    pub secondary_albedo_tex_scale_offset: Vec<vec4>,
    pub secondary_texture_scale_offset: Vec<vec4>,
    pub normal_tex_scale_offset: Vec<vec4>,
    pub rotation_normal: Vec<f32>,
    pub rotation_secondary: Vec<f32>,
    pub rotation_secondary_diffuse: Vec<f32>,
    pub rotation_secondary_normal: Vec<f32>,
    pub rotation: Vec<f32>,
    pub flags: Vec<i32>,
    pub color_bleed: Vec<f32>,
    pub albedo_blend_factor: Vec<f32>,
    pub secondary_normal_tex_blend: Vec<f32>,
    pub detail_normal_strength: Vec<f32>,
    pub secondary_normal_tex_scale_offset: Vec<vec4>,

    pub indexes: Vec<i32>,
    pub needs_to_update: bool,
    pub is_ready: bool,
    pub invisible_override: bool,
    pub follow_material: Vec<bool>,
}